"""
    Amazon Ads API - Sponsored Products

    Use the Amazon Ads API for Sponsored Products for campaign, ad group, keyword, negative keyword, and product ad management operations. For more information about Sponsored Products, see the [Sponsored Products Support Center](https://advertising.amazon.com/help?entityId=ENTITY3CWETCZD9HEG2#GWGFKPEWVWG2CLUJ). For onboarding information, see the [account setup](setting-up/account-setup) topic.<br/><br/>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from amazon_ads_sponsored_products_client.api_client import ApiClient, Endpoint as _Endpoint
from amazon_ads_sponsored_products_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from amazon_ads_sponsored_products_client.model.create_keyword import CreateKeyword
from amazon_ads_sponsored_products_client.model.error import Error
from amazon_ads_sponsored_products_client.model.keyword import Keyword
from amazon_ads_sponsored_products_client.model.keyword_ex import KeywordEx
from amazon_ads_sponsored_products_client.model.keyword_response import KeywordResponse
from amazon_ads_sponsored_products_client.model.update_keyword import UpdateKeyword


class KeywordsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.archive_keyword_endpoint = _Endpoint(
            settings={
                'response_type': (KeywordResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/keywords/{keywordId}',
                'operation_id': 'archive_keyword',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'keyword_id',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'keyword_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'keyword_id':
                        (float,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'keyword_id': 'keywordId',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'keyword_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_keywords_endpoint = _Endpoint(
            settings={
                'response_type': ([KeywordResponse],),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/keywords',
                'operation_id': 'create_keywords',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'create_keyword',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'create_keyword',
                ]
            },
            root_map={
                'validations': {
                    ('create_keyword',): {

                        'max_items': 1000,
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'create_keyword':
                        ([CreateKeyword],),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'create_keyword': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_keyword_endpoint = _Endpoint(
            settings={
                'response_type': (Keyword,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/keywords/{keywordId}',
                'operation_id': 'get_keyword',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'keyword_id',
                    'locale',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'keyword_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'keyword_id':
                        (float,),
                    'locale':
                        (str,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'keyword_id': 'keywordId',
                    'locale': 'locale',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'keyword_id': 'path',
                    'locale': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_keyword_ex_endpoint = _Endpoint(
            settings={
                'response_type': (KeywordEx,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/keywords/extended/{keywordId}',
                'operation_id': 'get_keyword_ex',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'keyword_id',
                    'locale',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'keyword_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'keyword_id':
                        (float,),
                    'locale':
                        (str,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'keyword_id': 'keywordId',
                    'locale': 'locale',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'keyword_id': 'path',
                    'locale': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_keywords_endpoint = _Endpoint(
            settings={
                'response_type': ([Keyword],),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/keywords',
                'operation_id': 'list_keywords',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'start_index',
                    'count',
                    'match_type_filter',
                    'keyword_text',
                    'state_filter',
                    'campaign_id_filter',
                    'ad_group_id_filter',
                    'keyword_id_filter',
                    'locale',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                ],
                'nullable': [
                ],
                'enum': [
                    'match_type_filter',
                    'state_filter',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('match_type_filter',): {

                        "BROAD": "broad",
                        "PHRASE": "phrase",
                        "EXACT": "exact"
                    },
                    ('state_filter',): {

                        "ENABLED": "enabled",
                        "PAUSED": "paused",
                        "ARCHIVED": "archived",
                        "ENABLED,_PAUSED": "enabled, paused",
                        "ENABLED,_ARCHIVED": "enabled, archived",
                        "PAUSED,_ARCHIVED": "paused, archived",
                        "ENABLED,_PAUSED,_ARCHIVED": "enabled, paused, archived"
                    },
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'start_index':
                        (float,),
                    'count':
                        (float,),
                    'match_type_filter':
                        (str,),
                    'keyword_text':
                        (str,),
                    'state_filter':
                        (str,),
                    'campaign_id_filter':
                        (str,),
                    'ad_group_id_filter':
                        (str,),
                    'keyword_id_filter':
                        (str,),
                    'locale':
                        (str,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'start_index': 'startIndex',
                    'count': 'count',
                    'match_type_filter': 'matchTypeFilter',
                    'keyword_text': 'keywordText',
                    'state_filter': 'stateFilter',
                    'campaign_id_filter': 'campaignIdFilter',
                    'ad_group_id_filter': 'adGroupIdFilter',
                    'keyword_id_filter': 'keywordIdFilter',
                    'locale': 'locale',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'start_index': 'query',
                    'count': 'query',
                    'match_type_filter': 'query',
                    'keyword_text': 'query',
                    'state_filter': 'query',
                    'campaign_id_filter': 'query',
                    'ad_group_id_filter': 'query',
                    'keyword_id_filter': 'query',
                    'locale': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_keywords_ex_endpoint = _Endpoint(
            settings={
                'response_type': ([KeywordEx],),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/keywords/extended',
                'operation_id': 'list_keywords_ex',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'start_index',
                    'count',
                    'match_type_filter',
                    'keyword_text',
                    'state_filter',
                    'campaign_id_filter',
                    'ad_group_id_filter',
                    'keyword_id_filter',
                    'locale',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                ],
                'nullable': [
                ],
                'enum': [
                    'match_type_filter',
                    'state_filter',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('match_type_filter',): {

                        "BROAD": "broad",
                        "PHRASE": "phrase",
                        "EXACT": "exact"
                    },
                    ('state_filter',): {

                        "ENABLED": "enabled",
                        "PAUSED": "paused",
                        "ARCHIVED": "archived",
                        "ENABLED,_PAUSED": "enabled, paused",
                        "ENABLED,_ARCHIVED": "enabled, archived",
                        "PAUSED,_ARCHIVED": "paused, archived",
                        "ENABLED,_PAUSED,_ARCHIVED": "enabled, paused, archived"
                    },
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'start_index':
                        (float,),
                    'count':
                        (float,),
                    'match_type_filter':
                        (str,),
                    'keyword_text':
                        (str,),
                    'state_filter':
                        (str,),
                    'campaign_id_filter':
                        (str,),
                    'ad_group_id_filter':
                        (str,),
                    'keyword_id_filter':
                        (str,),
                    'locale':
                        (str,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'start_index': 'startIndex',
                    'count': 'count',
                    'match_type_filter': 'matchTypeFilter',
                    'keyword_text': 'keywordText',
                    'state_filter': 'stateFilter',
                    'campaign_id_filter': 'campaignIdFilter',
                    'ad_group_id_filter': 'adGroupIdFilter',
                    'keyword_id_filter': 'keywordIdFilter',
                    'locale': 'locale',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'start_index': 'query',
                    'count': 'query',
                    'match_type_filter': 'query',
                    'keyword_text': 'query',
                    'state_filter': 'query',
                    'campaign_id_filter': 'query',
                    'ad_group_id_filter': 'query',
                    'keyword_id_filter': 'query',
                    'locale': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_keywords_endpoint = _Endpoint(
            settings={
                'response_type': ([KeywordResponse],),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/keywords',
                'operation_id': 'update_keywords',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'update_keyword',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'update_keyword',
                ]
            },
            root_map={
                'validations': {
                    ('update_keyword',): {

                        'max_items': 1000,
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'update_keyword':
                        ([UpdateKeyword],),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'update_keyword': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def archive_keyword(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        keyword_id,
        **kwargs
    ):
        """Archives a keyword.  # noqa: E501

        Set the status of the specified keyword to `archived`. Note that once the status for a keyword is set to `archived` it cannot be changed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.archive_keyword(amazon_advertising_api_client_id, amazon_advertising_api_scope, keyword_id, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
            keyword_id (float): The identifier of an existing keyword.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            KeywordResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        kwargs['keyword_id'] = \
            keyword_id
        return self.archive_keyword_endpoint.call_with_http_info(**kwargs)

    def create_keywords(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        **kwargs
    ):
        """Creates one or more keywords.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_keywords(amazon_advertising_api_client_id, amazon_advertising_api_scope, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.

        Keyword Args:
            create_keyword ([CreateKeyword]): An array of keyword objects.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [KeywordResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        return self.create_keywords_endpoint.call_with_http_info(**kwargs)

    def get_keyword(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        keyword_id,
        **kwargs
    ):
        """Gets a keyword specified by identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_keyword(amazon_advertising_api_client_id, amazon_advertising_api_scope, keyword_id, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
            keyword_id (float): The identifier of an existing keyword.

        Keyword Args:
            locale (str): The locale preference of the advertiser.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Keyword
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        kwargs['keyword_id'] = \
            keyword_id
        return self.get_keyword_endpoint.call_with_http_info(**kwargs)

    def get_keyword_ex(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        keyword_id,
        **kwargs
    ):
        """Gets a keyword with extended data fields.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_keyword_ex(amazon_advertising_api_client_id, amazon_advertising_api_scope, keyword_id, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
            keyword_id (float): The identifier of an existing keyword.

        Keyword Args:
            locale (str): The locale preference of the advertiser.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            KeywordEx
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        kwargs['keyword_id'] = \
            keyword_id
        return self.get_keyword_ex_endpoint.call_with_http_info(**kwargs)

    def list_keywords(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        **kwargs
    ):
        """list_keywords  # noqa: E501

        Gets a list of keywords.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_keywords(amazon_advertising_api_client_id, amazon_advertising_api_scope, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.

        Keyword Args:
            start_index (float): 0-indexed record offset for the result set.. [optional] if omitted the server will use the default value of 0
            count (float): Number of records to include in the paged response. Defaults to max page size.. [optional]
            match_type_filter (str): Restricts results to keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.. [optional]
            keyword_text (str): Restricts results to keywords that match the specified text exactly.. [optional]
            state_filter (str): Restricts results to resources with state within the specified comma-separated list.. [optional]
            campaign_id_filter (str): A comma-delimited list of campaign identifiers.. [optional]
            ad_group_id_filter (str): Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.. [optional]
            keyword_id_filter (str): Restricts results to keywords associated with campaigns specified by identifier in the comma-delimited list.. [optional]
            locale (str): Restricts results to keywords associated with locale.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Keyword]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        return self.list_keywords_endpoint.call_with_http_info(**kwargs)

    def list_keywords_ex(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        **kwargs
    ):
        """Gets a list of keywords that have extended data fields.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_keywords_ex(amazon_advertising_api_client_id, amazon_advertising_api_scope, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.

        Keyword Args:
            start_index (float): 0-indexed record offset for the result set.. [optional] if omitted the server will use the default value of 0
            count (float): Number of records to include in the paged response. Defaults to max page size.. [optional]
            match_type_filter (str): Restricts results to keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.. [optional]
            keyword_text (str): Restricts results to keywords that match the specified text exactly.. [optional]
            state_filter (str): Restricts results to resources with state within the specified comma-separated list.. [optional]
            campaign_id_filter (str): A comma-delimited list of campaign identifiers.. [optional]
            ad_group_id_filter (str): Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.. [optional]
            keyword_id_filter (str): Restricts results to keywords associated with campaigns specified by identifier in the comma-delimited list.. [optional]
            locale (str): Restricts results to keywords associated with locale.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [KeywordEx]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        return self.list_keywords_ex_endpoint.call_with_http_info(**kwargs)

    def update_keywords(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        **kwargs
    ):
        """Updates one or more keywords.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_keywords(amazon_advertising_api_client_id, amazon_advertising_api_scope, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.

        Keyword Args:
            update_keyword ([UpdateKeyword]): An array of update keyword objects.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [KeywordResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        return self.update_keywords_endpoint.call_with_http_info(**kwargs)

