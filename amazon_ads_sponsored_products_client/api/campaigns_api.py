"""
    Amazon Ads API - Sponsored Products

    Use the Amazon Ads API for Sponsored Products for campaign, ad group, keyword, negative keyword, and product ad management operations. For more information about Sponsored Products, see the [Sponsored Products Support Center](https://advertising.amazon.com/help?entityId=ENTITY3CWETCZD9HEG2#GWGFKPEWVWG2CLUJ). For onboarding information, see the [account setup](setting-up/account-setup) topic.<br/><br/>   # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from amazon_ads_sponsored_products_client.api_client import ApiClient, Endpoint as _Endpoint
from amazon_ads_sponsored_products_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from amazon_ads_sponsored_products_client.model.campaign import Campaign
from amazon_ads_sponsored_products_client.model.campaign_ex import CampaignEx
from amazon_ads_sponsored_products_client.model.campaign_response import CampaignResponse
from amazon_ads_sponsored_products_client.model.create_campaign import CreateCampaign
from amazon_ads_sponsored_products_client.model.error import Error
from amazon_ads_sponsored_products_client.model.update_campaign import UpdateCampaign


class CampaignsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.archive_campaign_endpoint = _Endpoint(
            settings={
                'response_type': (CampaignResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/campaigns/{campaignId}',
                'operation_id': 'archive_campaign',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'campaign_id',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'campaign_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'campaign_id':
                        (float,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'campaign_id': 'campaignId',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'campaign_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_campaigns_endpoint = _Endpoint(
            settings={
                'response_type': ([CampaignResponse],),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/campaigns',
                'operation_id': 'create_campaigns',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'create_campaign',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'create_campaign',
                ]
            },
            root_map={
                'validations': {
                    ('create_campaign',): {

                        'max_items': 100,
                        'min_items': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'create_campaign':
                        ([CreateCampaign],),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'create_campaign': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_campaign_endpoint = _Endpoint(
            settings={
                'response_type': (Campaign,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/campaigns/{campaignId}',
                'operation_id': 'get_campaign',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'campaign_id',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'campaign_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'campaign_id':
                        (float,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'campaign_id': 'campaignId',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'campaign_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_campaign_ex_endpoint = _Endpoint(
            settings={
                'response_type': (CampaignEx,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/campaigns/extended/{campaignId}',
                'operation_id': 'get_campaign_ex',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'campaign_id',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'campaign_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'campaign_id':
                        (float,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'campaign_id': 'campaignId',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'campaign_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_campaigns_endpoint = _Endpoint(
            settings={
                'response_type': ([Campaign],),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/campaigns',
                'operation_id': 'list_campaigns',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'start_index',
                    'count',
                    'state_filter',
                    'name',
                    'portfolio_id_filter',
                    'campaign_id_filter',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                ],
                'nullable': [
                ],
                'enum': [
                    'state_filter',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('state_filter',): {

                        "ENABLED": "enabled",
                        "PAUSED": "paused",
                        "ARCHIVED": "archived",
                        "ENABLED,_PAUSED": "enabled, paused",
                        "ENABLED,_ARCHIVED": "enabled, archived",
                        "PAUSED,_ARCHIVED": "paused, archived",
                        "ENABLED,_PAUSED,_ARCHIVED": "enabled, paused, archived"
                    },
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'start_index':
                        (float,),
                    'count':
                        (float,),
                    'state_filter':
                        (str,),
                    'name':
                        (str,),
                    'portfolio_id_filter':
                        (str,),
                    'campaign_id_filter':
                        (str,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'start_index': 'startIndex',
                    'count': 'count',
                    'state_filter': 'stateFilter',
                    'name': 'name',
                    'portfolio_id_filter': 'portfolioIdFilter',
                    'campaign_id_filter': 'campaignIdFilter',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'start_index': 'query',
                    'count': 'query',
                    'state_filter': 'query',
                    'name': 'query',
                    'portfolio_id_filter': 'query',
                    'campaign_id_filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_campaigns_ex_endpoint = _Endpoint(
            settings={
                'response_type': ([CampaignEx],),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/campaigns/extended',
                'operation_id': 'list_campaigns_ex',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'start_index',
                    'count',
                    'state_filter',
                    'name',
                    'portfolio_id_filter',
                    'campaign_id_filter',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                ],
                'nullable': [
                ],
                'enum': [
                    'state_filter',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('state_filter',): {

                        "ENABLED": "enabled",
                        "PAUSED": "paused",
                        "ARCHIVED": "archived",
                        "ENABLED,_PAUSED": "enabled, paused",
                        "ENABLED,_ARCHIVED": "enabled, archived",
                        "PAUSED,_ARCHIVED": "paused, archived",
                        "ENABLED,_PAUSED,_ARCHIVED": "enabled, paused, archived"
                    },
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'start_index':
                        (float,),
                    'count':
                        (float,),
                    'state_filter':
                        (str,),
                    'name':
                        (str,),
                    'portfolio_id_filter':
                        (str,),
                    'campaign_id_filter':
                        (str,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'start_index': 'startIndex',
                    'count': 'count',
                    'state_filter': 'stateFilter',
                    'name': 'name',
                    'portfolio_id_filter': 'portfolioIdFilter',
                    'campaign_id_filter': 'campaignIdFilter',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'start_index': 'query',
                    'count': 'query',
                    'state_filter': 'query',
                    'name': 'query',
                    'portfolio_id_filter': 'query',
                    'campaign_id_filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_campaigns_endpoint = _Endpoint(
            settings={
                'response_type': ([CampaignResponse],),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/campaigns',
                'operation_id': 'update_campaigns',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'update_campaign',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'update_campaign',
                ]
            },
            root_map={
                'validations': {
                    ('update_campaign',): {

                        'max_items': 100,
                        'min_items': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'update_campaign':
                        ([UpdateCampaign],),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'update_campaign': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def archive_campaign(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        campaign_id,
        **kwargs
    ):
        """Archives a campaign.  # noqa: E501

        Sets the campaign status to `archived`. Archived entities cannot be made active again. See [developer notes](https://advertising.amazon.com/API/docs/en-us/get-started/developer-notes#Archiving) for more information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.archive_campaign(amazon_advertising_api_client_id, amazon_advertising_api_scope, campaign_id, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
            campaign_id (float): The identifier of an existing campaign.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CampaignResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        kwargs['campaign_id'] = \
            campaign_id
        return self.archive_campaign_endpoint.call_with_http_info(**kwargs)

    def create_campaigns(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        **kwargs
    ):
        """Creates one or more campaigns.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_campaigns(amazon_advertising_api_client_id, amazon_advertising_api_scope, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.

        Keyword Args:
            create_campaign ([CreateCampaign]): An array of campaigns.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [CampaignResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        return self.create_campaigns_endpoint.call_with_http_info(**kwargs)

    def get_campaign(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        campaign_id,
        **kwargs
    ):
        """Gets a campaign specified by identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_campaign(amazon_advertising_api_client_id, amazon_advertising_api_scope, campaign_id, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
            campaign_id (float): The identifier of an existing campaign.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Campaign
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        kwargs['campaign_id'] = \
            campaign_id
        return self.get_campaign_endpoint.call_with_http_info(**kwargs)

    def get_campaign_ex(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        campaign_id,
        **kwargs
    ):
        """Gets a campaign with extended data fields.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_campaign_ex(amazon_advertising_api_client_id, amazon_advertising_api_scope, campaign_id, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
            campaign_id (float): The identifier of an existing campaign.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CampaignEx
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        kwargs['campaign_id'] = \
            campaign_id
        return self.get_campaign_ex_endpoint.call_with_http_info(**kwargs)

    def list_campaigns(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        **kwargs
    ):
        """Gets an array of campaigns.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_campaigns(amazon_advertising_api_client_id, amazon_advertising_api_scope, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.

        Keyword Args:
            start_index (float): 0-indexed record offset for the result set.. [optional] if omitted the server will use the default value of 0
            count (float): Number of records to include in the paged response. Defaults to max page size.. [optional]
            state_filter (str): Restricts results to resources with state within the specified comma-separated list.. [optional]
            name (str): Restricts results to campaigns with the specified name.. [optional]
            portfolio_id_filter (str): A comma-delimited list of portfolio identifiers.. [optional]
            campaign_id_filter (str): A comma-delimited list of campaign identifiers.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Campaign]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        return self.list_campaigns_endpoint.call_with_http_info(**kwargs)

    def list_campaigns_ex(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        **kwargs
    ):
        """Gets an array of campaigns with extended data fields.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_campaigns_ex(amazon_advertising_api_client_id, amazon_advertising_api_scope, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.

        Keyword Args:
            start_index (float): 0-indexed record offset for the result set.. [optional] if omitted the server will use the default value of 0
            count (float): Number of records to include in the paged response. Defaults to max page size.. [optional]
            state_filter (str): Restricts results to resources with state within the specified comma-separated list.. [optional]
            name (str): Restricts results to campaigns with the specified name.. [optional]
            portfolio_id_filter (str): A comma-delimited list of portfolio identifiers.. [optional]
            campaign_id_filter (str): A comma-delimited list of campaign identifiers.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [CampaignEx]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        return self.list_campaigns_ex_endpoint.call_with_http_info(**kwargs)

    def update_campaigns(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        **kwargs
    ):
        """Updates one or more campaigns.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_campaigns(amazon_advertising_api_client_id, amazon_advertising_api_scope, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.

        Keyword Args:
            update_campaign ([UpdateCampaign]): An array of campaigns with updated values.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [CampaignResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        return self.update_campaigns_endpoint.call_with_http_info(**kwargs)

