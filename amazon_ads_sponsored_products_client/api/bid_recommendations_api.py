"""
    Amazon Ads API - Sponsored Products

    Use the Amazon Ads API for Sponsored Products for campaign, ad group, keyword, negative keyword, and product ad management operations. For more information about Sponsored Products, see the [Sponsored Products Support Center](https://advertising.amazon.com/help?entityId=ENTITY3CWETCZD9HEG2#GWGFKPEWVWG2CLUJ). For onboarding information, see the [account setup](setting-up/account-setup) topic.<br/><br/>   # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from amazon_ads_sponsored_products_client.api_client import ApiClient, Endpoint as _Endpoint
from amazon_ads_sponsored_products_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from amazon_ads_sponsored_products_client.model.ad_group_bid_recommendations_response import AdGroupBidRecommendationsResponse
from amazon_ads_sponsored_products_client.model.bid_recommendations_response import BidRecommendationsResponse
from amazon_ads_sponsored_products_client.model.error import Error
from amazon_ads_sponsored_products_client.model.inline_object1 import InlineObject1
from amazon_ads_sponsored_products_client.model.inline_response200 import InlineResponse200
from amazon_ads_sponsored_products_client.model.keyword_bid_recommendations_data import KeywordBidRecommendationsData
from amazon_ads_sponsored_products_client.model.keyword_bid_recommendations_response import KeywordBidRecommendationsResponse


class BidRecommendationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_keyword_bid_recommendations_endpoint = _Endpoint(
            settings={
                'response_type': (BidRecommendationsResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/keywords/bidRecommendations',
                'operation_id': 'create_keyword_bid_recommendations',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'keyword_bid_recommendations_data',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'keyword_bid_recommendations_data':
                        (KeywordBidRecommendationsData,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'keyword_bid_recommendations_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_ad_group_bid_recommendations_endpoint = _Endpoint(
            settings={
                'response_type': (AdGroupBidRecommendationsResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/adGroups/{adGroupId}/bidRecommendations',
                'operation_id': 'get_ad_group_bid_recommendations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'ad_group_id',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'ad_group_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'ad_group_id':
                        (float,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'ad_group_id': 'adGroupId',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'ad_group_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_bid_recommendations_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse200,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/targets/bidRecommendations',
                'operation_id': 'get_bid_recommendations',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'inline_object1',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'inline_object1':
                        (InlineObject1,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'inline_object1': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_keyword_bid_recommendations_endpoint = _Endpoint(
            settings={
                'response_type': (KeywordBidRecommendationsResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/keywords/{keywordId}/bidRecommendations',
                'operation_id': 'get_keyword_bid_recommendations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'keyword_id',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'keyword_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'keyword_id':
                        (float,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'keyword_id': 'keywordId',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'keyword_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def create_keyword_bid_recommendations(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        **kwargs
    ):
        """Gets bid recommendations for keywords.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_keyword_bid_recommendations(amazon_advertising_api_client_id, amazon_advertising_api_scope, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.

        Keyword Args:
            keyword_bid_recommendations_data (KeywordBidRecommendationsData): An array of keyword bid recommendation objects.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BidRecommendationsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        return self.create_keyword_bid_recommendations_endpoint.call_with_http_info(**kwargs)

    def get_ad_group_bid_recommendations(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        ad_group_id,
        **kwargs
    ):
        """Gets a bid recommendation for an ad group.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ad_group_bid_recommendations(amazon_advertising_api_client_id, amazon_advertising_api_scope, ad_group_id, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
            ad_group_id (float): The identifier of an existing ad group.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AdGroupBidRecommendationsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        kwargs['ad_group_id'] = \
            ad_group_id
        return self.get_ad_group_bid_recommendations_endpoint.call_with_http_info(**kwargs)

    def get_bid_recommendations(
        self,
        **kwargs
    ):
        """Gets a list of bid recommendations for keyword, product, or auto targeting expressions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_bid_recommendations(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            inline_object1 (InlineObject1): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse200
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_bid_recommendations_endpoint.call_with_http_info(**kwargs)

    def get_keyword_bid_recommendations(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        keyword_id,
        **kwargs
    ):
        """Gets a bid recommendation for a keyword.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_keyword_bid_recommendations(amazon_advertising_api_client_id, amazon_advertising_api_scope, keyword_id, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
            keyword_id (float): The identifier of an existing keyword.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            KeywordBidRecommendationsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        kwargs['keyword_id'] = \
            keyword_id
        return self.get_keyword_bid_recommendations_endpoint.call_with_http_info(**kwargs)

