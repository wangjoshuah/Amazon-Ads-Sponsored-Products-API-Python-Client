"""
    Amazon Ads API - Sponsored Products

    Use the Amazon Ads API for Sponsored Products for campaign, ad group, keyword, negative keyword, and product ad management operations. For more information about Sponsored Products, see the [Sponsored Products Support Center](https://advertising.amazon.com/help?entityId=ENTITY3CWETCZD9HEG2#GWGFKPEWVWG2CLUJ). For onboarding information, see the [account setup](setting-up/account-setup) topic.<br/><br/>   # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from amazon_ads_sponsored_products_client.api_client import ApiClient, Endpoint as _Endpoint
from amazon_ads_sponsored_products_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from amazon_ads_sponsored_products_client.model.brand_response import BrandResponse
from amazon_ads_sponsored_products_client.model.create_targeting_clause import CreateTargetingClause
from amazon_ads_sponsored_products_client.model.error import Error
from amazon_ads_sponsored_products_client.model.inline_object2 import InlineObject2
from amazon_ads_sponsored_products_client.model.product_recommendations_response import ProductRecommendationsResponse
from amazon_ads_sponsored_products_client.model.targeting_clause import TargetingClause
from amazon_ads_sponsored_products_client.model.targeting_clause_ex import TargetingClauseEx
from amazon_ads_sponsored_products_client.model.targeting_clause_response import TargetingClauseResponse
from amazon_ads_sponsored_products_client.model.update_targeting_clause import UpdateTargetingClause


class ProductTargetingApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.archive_targeting_clause_endpoint = _Endpoint(
            settings={
                'response_type': (TargetingClauseResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/targets/{targetId}',
                'operation_id': 'archive_targeting_clause',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'target_id',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'target_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'target_id':
                        (float,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'target_id': 'targetId',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'target_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_target_recommendations_endpoint = _Endpoint(
            settings={
                'response_type': (ProductRecommendationsResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/targets/productRecommendations',
                'operation_id': 'create_target_recommendations',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'inline_object2',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'inline_object2':
                        (InlineObject2,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'inline_object2': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_targeting_clauses_endpoint = _Endpoint(
            settings={
                'response_type': ([TargetingClauseResponse],),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/targets',
                'operation_id': 'create_targeting_clauses',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'create_targeting_clause',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'create_targeting_clause':
                        ([CreateTargetingClause],),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'create_targeting_clause': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_brand_recommendations_endpoint = _Endpoint(
            settings={
                'response_type': (BrandResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/targets/brands',
                'operation_id': 'get_brand_recommendations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'keyword',
                    'category_id',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'keyword':
                        (str,),
                    'category_id':
                        (float,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'keyword': 'keyword',
                    'category_id': 'categoryId',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'keyword': 'query',
                    'category_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_targeting_clause_endpoint = _Endpoint(
            settings={
                'response_type': (TargetingClause,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/targets/{targetId}',
                'operation_id': 'get_targeting_clause',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'target_id',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'target_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'target_id':
                        (float,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'target_id': 'targetId',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'target_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_targeting_clause_ex_endpoint = _Endpoint(
            settings={
                'response_type': (TargetingClauseEx,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/targets/extended/{targetId}',
                'operation_id': 'get_targeting_clause_ex',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'target_id',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'target_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'target_id':
                        (float,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'target_id': 'targetId',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'target_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_targeting_clauses_endpoint = _Endpoint(
            settings={
                'response_type': ([TargetingClause],),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/targets',
                'operation_id': 'list_targeting_clauses',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'start_index',
                    'count',
                    'state_filter',
                    'campaign_id_filter',
                    'ad_group_id_filter',
                    'target_id_filter',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                ],
                'nullable': [
                ],
                'enum': [
                    'state_filter',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('state_filter',): {

                        "ENABLED": "enabled",
                        "PAUSED": "paused",
                        "ARCHIVED": "archived",
                        "ENABLED,_PAUSED": "enabled, paused",
                        "ENABLED,_ARCHIVED": "enabled, archived",
                        "PAUSED,_ARCHIVED": "paused, archived",
                        "ENABLED,_PAUSED,_ARCHIVED": "enabled, paused, archived"
                    },
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'start_index':
                        (float,),
                    'count':
                        (float,),
                    'state_filter':
                        (str,),
                    'campaign_id_filter':
                        (str,),
                    'ad_group_id_filter':
                        (str,),
                    'target_id_filter':
                        (str,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'start_index': 'startIndex',
                    'count': 'count',
                    'state_filter': 'stateFilter',
                    'campaign_id_filter': 'campaignIdFilter',
                    'ad_group_id_filter': 'adGroupIdFilter',
                    'target_id_filter': 'targetIdFilter',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'start_index': 'query',
                    'count': 'query',
                    'state_filter': 'query',
                    'campaign_id_filter': 'query',
                    'ad_group_id_filter': 'query',
                    'target_id_filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_targeting_clauses_ex_endpoint = _Endpoint(
            settings={
                'response_type': ([TargetingClauseEx],),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/targets/extended',
                'operation_id': 'list_targeting_clauses_ex',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'start_index',
                    'count',
                    'state_filter',
                    'campaign_id_filter',
                    'ad_group_id_filter',
                    'target_id_filter',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                ],
                'nullable': [
                ],
                'enum': [
                    'state_filter',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('state_filter',): {

                        "ENABLED": "enabled",
                        "PAUSED": "paused",
                        "ARCHIVED": "archived",
                        "ENABLED,_PAUSED": "enabled, paused",
                        "ENABLED,_ARCHIVED": "enabled, archived",
                        "PAUSED,_ARCHIVED": "paused, archived",
                        "ENABLED,_PAUSED,_ARCHIVED": "enabled, paused, archived"
                    },
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'start_index':
                        (float,),
                    'count':
                        (float,),
                    'state_filter':
                        (str,),
                    'campaign_id_filter':
                        (str,),
                    'ad_group_id_filter':
                        (str,),
                    'target_id_filter':
                        (str,),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                    'start_index': 'startIndex',
                    'count': 'count',
                    'state_filter': 'stateFilter',
                    'campaign_id_filter': 'campaignIdFilter',
                    'ad_group_id_filter': 'adGroupIdFilter',
                    'target_id_filter': 'targetIdFilter',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'start_index': 'query',
                    'count': 'query',
                    'state_filter': 'query',
                    'campaign_id_filter': 'query',
                    'ad_group_id_filter': 'query',
                    'target_id_filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_targeting_clause_endpoint = _Endpoint(
            settings={
                'response_type': ([TargetingClauseResponse],),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/v2/sp/targets',
                'operation_id': 'update_targeting_clause',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                    'update_targeting_clause',
                ],
                'required': [
                    'amazon_advertising_api_client_id',
                    'amazon_advertising_api_scope',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'amazon_advertising_api_client_id':
                        (str,),
                    'amazon_advertising_api_scope':
                        (str,),
                    'update_targeting_clause':
                        ([UpdateTargetingClause],),
                },
                'attribute_map': {
                    'amazon_advertising_api_client_id': 'Amazon-Advertising-API-ClientId',
                    'amazon_advertising_api_scope': 'Amazon-Advertising-API-Scope',
                },
                'location_map': {
                    'amazon_advertising_api_client_id': 'header',
                    'amazon_advertising_api_scope': 'header',
                    'update_targeting_clause': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def archive_targeting_clause(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        target_id,
        **kwargs
    ):
        """Archives a targeting clause.  # noqa: E501

        Set the `status` of a targeting clause to `archived`. Note that once a targeting clause `status` is set to `archived`, it cannot be changed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.archive_targeting_clause(amazon_advertising_api_client_id, amazon_advertising_api_scope, target_id, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
            target_id (float): The target identifier.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TargetingClauseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        kwargs['target_id'] = \
            target_id
        return self.archive_targeting_clause_endpoint.call_with_http_info(**kwargs)

    def create_target_recommendations(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        **kwargs
    ):
        """Gets a list of recommended products for targeting.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_target_recommendations(amazon_advertising_api_client_id, amazon_advertising_api_scope, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.

        Keyword Args:
            inline_object2 (InlineObject2): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ProductRecommendationsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        return self.create_target_recommendations_endpoint.call_with_http_info(**kwargs)

    def create_targeting_clauses(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        **kwargs
    ):
        """Creates one or more targeting expressions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_targeting_clauses(amazon_advertising_api_client_id, amazon_advertising_api_scope, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.

        Keyword Args:
            create_targeting_clause ([CreateTargetingClause]): A list of targeting clauses.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [TargetingClauseResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        return self.create_targeting_clauses_endpoint.call_with_http_info(**kwargs)

    def get_brand_recommendations(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        **kwargs
    ):
        """Get recommended brands for Sponsored Products.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_brand_recommendations(amazon_advertising_api_client_id, amazon_advertising_api_scope, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.

        Keyword Args:
            keyword (str): A keyword for which to get recommended brands.. [optional]
            category_id (float): Gets the top 50 brands for the specified category identifier.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BrandResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        return self.get_brand_recommendations_endpoint.call_with_http_info(**kwargs)

    def get_targeting_clause(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        target_id,
        **kwargs
    ):
        """Get a targeting clause specified by identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_targeting_clause(amazon_advertising_api_client_id, amazon_advertising_api_scope, target_id, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
            target_id (float): The target identifier.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TargetingClause
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        kwargs['target_id'] = \
            target_id
        return self.get_targeting_clause_endpoint.call_with_http_info(**kwargs)

    def get_targeting_clause_ex(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        target_id,
        **kwargs
    ):
        """Get a targeting clause specified by identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_targeting_clause_ex(amazon_advertising_api_client_id, amazon_advertising_api_scope, target_id, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
            target_id (float): The target identifier.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TargetingClauseEx
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        kwargs['target_id'] = \
            target_id
        return self.get_targeting_clause_ex_endpoint.call_with_http_info(**kwargs)

    def list_targeting_clauses(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        **kwargs
    ):
        """Gets a list of targeting clauses filtered by specified criteria.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_targeting_clauses(amazon_advertising_api_client_id, amazon_advertising_api_scope, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.

        Keyword Args:
            start_index (float): 0-indexed record offset for the result set.. [optional] if omitted the server will use the default value of 0
            count (float): Number of records to include in the paged response. Defaults to max page size.. [optional]
            state_filter (str): Restricts results to resources with state within the specified comma-separated list.. [optional]
            campaign_id_filter (str): A comma-delimited list of campaign identifiers.. [optional]
            ad_group_id_filter (str): Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.. [optional]
            target_id_filter (str): A comma-delimited list of target identifiers.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [TargetingClause]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        return self.list_targeting_clauses_endpoint.call_with_http_info(**kwargs)

    def list_targeting_clauses_ex(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        **kwargs
    ):
        """Gets a list of targeting clauses filtered by specified criteria.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_targeting_clauses_ex(amazon_advertising_api_client_id, amazon_advertising_api_scope, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.

        Keyword Args:
            start_index (float): 0-indexed record offset for the result set.. [optional] if omitted the server will use the default value of 0
            count (float): Number of records to include in the paged response. Defaults to max page size.. [optional]
            state_filter (str): Restricts results to resources with state within the specified comma-separated list.. [optional]
            campaign_id_filter (str): A comma-delimited list of campaign identifiers.. [optional]
            ad_group_id_filter (str): Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.. [optional]
            target_id_filter (str): A comma-delimited list of target identifiers.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [TargetingClauseEx]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        return self.list_targeting_clauses_ex_endpoint.call_with_http_info(**kwargs)

    def update_targeting_clause(
        self,
        amazon_advertising_api_client_id,
        amazon_advertising_api_scope,
        **kwargs
    ):
        """Updates one or more targeting clauses.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_targeting_clause(amazon_advertising_api_client_id, amazon_advertising_api_scope, async_req=True)
        >>> result = thread.get()

        Args:
            amazon_advertising_api_client_id (str): The identifier of a client associated with a \"Login with Amazon\" developer account.
            amazon_advertising_api_scope (str): The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.

        Keyword Args:
            update_targeting_clause ([UpdateTargetingClause]): A list of targeting clauses with updated values.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [TargetingClauseResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['amazon_advertising_api_client_id'] = \
            amazon_advertising_api_client_id
        kwargs['amazon_advertising_api_scope'] = \
            amazon_advertising_api_scope
        return self.update_targeting_clause_endpoint.call_with_http_info(**kwargs)

